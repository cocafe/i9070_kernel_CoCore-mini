From 26eef467c936cf3d4d5c9b6e38c522148f5ca39e Mon Sep 17 00:00:00 2001
From: Ezekeel <notezekeel@googlemail.com>
Date: Fri, 6 Jul 2012 23:50:48 +0200
Subject: [PATCH] Added Battery Life eXtender (BLX) version 1.

Conflicts:

	drivers/misc/Kconfig
	drivers/misc/Makefile
---
 drivers/misc/Kconfig             |    6 +++
 drivers/misc/Makefile            |    2 +
 drivers/misc/blx.c               |  105 ++++++++++++++++++++++++++++++++++++++
 drivers/power/max17040_battery.c |   20 ++++++++
 include/linux/blx.h              |   10 ++++
 5 files changed, 143 insertions(+)
 create mode 100644 drivers/misc/blx.c
 create mode 100644 include/linux/blx.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 7519cb3..5d14b9a 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -591,4 +591,10 @@ config SOUND_CONTROL
 	help
 	  Enable support for Sound Control
 
+config BLX
+	bool "Support for Battery Life eXtender"
+	default y
+	help
+	  Say Y here to enable Battery Life eXtender
+
 endif # MISC_DEVICES
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 0ea7e43..8f03332 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,5 @@ obj-$(CONFIG_OMAP_DIE_TEMP_SENSOR)	+= omap_temp_sensor.o temp_control.o
 obj-$(CONFIG_LEDS_AN30259A)	+= leds-an30259a.o
 obj-$(CONFIG_COLOR_CONTROL)	+= color_control.o
 obj-$(CONFIG_SOUND_CONTROL)	+= sound_control.o
+obj-$(CONFIG_BLX)		+= blx.o
+>>>>>>> 0821e8f... Added Battery Life eXtender (BLX) version 1.
diff --git a/drivers/misc/blx.c b/drivers/misc/blx.c
new file mode 100644
index 0000000..e5cd508
--- /dev/null
+++ b/drivers/misc/blx.c
@@ -0,0 +1,105 @@
+/* drivers/misc/blx.c
+ *
+ * Copyright 2011  Ezekeel
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/miscdevice.h>
+#include <linux/blx.h>
+
+#define BATTERYLIFEEXTENDER_VERSION 1
+
+static int charging_limit = MAX_CHARGINGLIMIT;
+
+static ssize_t blx_charginglimit_read(struct device * dev, struct device_attribute * attr, char * buf)
+{
+    return sprintf(buf, "%u\n", charging_limit);
+}
+
+static ssize_t blx_charginglimit_write(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
+{
+    unsigned int data;
+
+    if(sscanf(buf, "%u\n", &data) == 1) 
+	{
+	    if (data >= 0 && data <= MAX_CHARGINGLIMIT)
+		{
+		    charging_limit = data;
+		    
+		    pr_info("BLX charging limit set to %u\n", charging_limit);
+		}
+	    else
+		{
+		    pr_info("%s: invalid input range %u\n", __FUNCTION__, data);
+		}
+	} 
+    else 
+	{
+	    pr_info("%s: invalid input\n", __FUNCTION__);
+	}
+
+    return size;
+}
+
+static ssize_t blx_version(struct device * dev, struct device_attribute * attr, char * buf)
+{
+    return sprintf(buf, "%u\n", BATTERYLIFEEXTENDER_VERSION);
+}
+
+static DEVICE_ATTR(charging_limit, S_IRUGO | S_IWUGO, blx_charginglimit_read, blx_charginglimit_write);
+static DEVICE_ATTR(version, S_IRUGO , blx_version, NULL);
+
+static struct attribute *blx_attributes[] = 
+    {
+	&dev_attr_charging_limit.attr,
+	&dev_attr_version.attr,
+	NULL
+    };
+
+static struct attribute_group blx_group = 
+    {
+	.attrs  = blx_attributes,
+    };
+
+static struct miscdevice blx_device = 
+    {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "batterylifeextender",
+    };
+
+int get_charginglimit(void)
+{
+    return charging_limit;
+}
+EXPORT_SYMBOL(get_charginglimit);
+
+static int __init blx_init(void)
+{
+    int ret;
+
+    pr_info("%s misc_register(%s)\n", __FUNCTION__, blx_device.name);
+
+    ret = misc_register(&blx_device);
+
+    if (ret) 
+	{
+	    pr_err("%s misc_register(%s) fail\n", __FUNCTION__, blx_device.name);
+
+	    return 1;
+	}
+
+    if (sysfs_create_group(&blx_device.this_device->kobj, &blx_group) < 0) 
+	{
+	    pr_err("%s sysfs_create_group fail\n", __FUNCTION__);
+	    pr_err("Failed to create sysfs group for device (%s)!\n", blx_device.name);
+	}
+
+    return 0;
+}
+
+device_initcall(blx_init);
diff --git a/drivers/power/max17040_battery.c b/drivers/power/max17040_battery.c
index 8ca350a..7103e15 100644
--- a/drivers/power/max17040_battery.c
+++ b/drivers/power/max17040_battery.c
@@ -25,6 +25,10 @@
 #include <linux/interrupt.h>
 #include <linux/reboot.h>
 
+#ifdef CONFIG_BLX
+#include <linux/blx.h>
+#endif
+
 #define MAX17040_VCELL_MSB	0x02
 #define MAX17040_VCELL_LSB	0x03
 #define MAX17040_SOC_MSB	0x04
@@ -290,9 +294,15 @@ static void max17040_charger_update(struct max17040_chip *chip)
 
 	switch (chip->charger_status) {
 	case STATUS_CHARGABLE:
+#ifdef CONFIG_BLX
+		if ((get_charginglimit() != MAX_CHARGINGLIMIT && chip->soc >= get_charginglimit()) ||
+		    (chip->pdata->is_full_charge() && chip->soc >= MAX17040_BATTERY_FULL &&
+		     chip->vcell > chip->pdata->fully_charged_vol)) {
+#else
 		if (chip->pdata->is_full_charge() &&
 			chip->soc >= MAX17040_BATTERY_FULL &&
 				chip->vcell > chip->pdata->fully_charged_vol) {
+#endif
 			chip->charger_status = STATUS_CHARGE_FULL;
 			chip->is_timer_flag = true;
 			chip->chg_limit_time = 0;
@@ -312,7 +322,12 @@ static void max17040_charger_update(struct max17040_chip *chip)
 		break;
 
 	case STATUS_CHARGE_FULL:
+#ifdef CONFIG_BLX
+		if ((get_charginglimit() == MAX_CHARGINGLIMIT || chip->soc < get_charginglimit()) &&
+		    chip->vcell <= chip->pdata->recharge_vol) {
+#else
 		if (chip->vcell <= chip->pdata->recharge_vol) {
+#endif
 			chip->charger_status = STATUS_CHARGABLE;
 			chip->pdata->allow_charging(1);
 		}
@@ -328,7 +343,12 @@ static void max17040_charger_update(struct max17040_chip *chip)
 		break;
 
 	case STATUS_CHARGE_TIMEOVER:
+#ifdef CONFIG_BLX
+		if ((get_charginglimit() == MAX_CHARGINGLIMIT || chip->soc < get_charginglimit()) &&
+		    chip->vcell <= chip->pdata->fully_charged_vol) {
+#else
 		if (chip->vcell <= chip->pdata->fully_charged_vol) {
+#endif
 			chip->charger_status = STATUS_CHARGABLE;
 			chip->pdata->allow_charging(1);
 		}
diff --git a/include/linux/blx.h b/include/linux/blx.h
new file mode 100644
index 0000000..7fa45fc
--- /dev/null
+++ b/include/linux/blx.h
@@ -0,0 +1,10 @@
+/* include/linux/blx.h */
+
+#ifndef _LINUX_BLX_H
+#define _LINUX_BLX_H
+
+#define MAX_CHARGINGLIMIT 100
+
+int get_charginglimit(void);
+
+#endif
-- 
1.7.10

