From b853656906c019f85b8e507f5a90e47691075246 Mon Sep 17 00:00:00 2001
From: tegrak <luciferanna@gmail.com>
Date: Wed, 3 Aug 2011 23:42:30 +0900
Subject: [PATCH] added BLN

---
 .../input/keyboard/cypress/cypress-touchkey.c      |  270 +++++++++++++++++++-
 1 file changed, 267 insertions(+), 3 deletions(-)
 mode change 100644 => 100755 kernel/drivers/input/keyboard/cypress/cypress-touchkey.c

diff --git a/kernel/drivers/input/keyboard/cypress/cypress-touchkey.c b/kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
old mode 100644
new mode 100755
index 2b959db..c5d94be
--- a/kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
+++ b/kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
@@ -66,6 +66,23 @@
 #define TEST_JIG_MODE
 */
 
+#define CONFIG_TOUCHKEY_BLN
+#ifdef CONFIG_TOUCHKEY_BLN
+#include <linux/miscdevice.h>
+#include <linux/wakelock.h>
+#define BLN_VERSION 9
+
+bool bln_enabled = false;
+bool BLN_ongoing = false;
+bool bln_blink_enabled = false;
+bool bln_suspended = false;
+
+static void enable_led_notification(void);
+static void disable_led_notification(void);
+
+static struct wake_lock bln_wake_lock;
+#endif
+
 
 static int touchkey_keycode[3] = { 0, KEY_MENU, KEY_BACK };
 
@@ -247,7 +264,9 @@ static int i2c_touchkey_write(u8 * val, unsigned int len)
 	int retry = 2;
 
 	if ((touchkey_driver == NULL) || !(touchkey_enable == 1)) {
-		//printk(KERN_ERR "[TouchKey] touchkey is not enabled.\n");
+#if 1 /* creams */
+		printk(KERN_ERR "[TouchKey] touchkey is not enabled.\n");
+#endif
 		return -ENODEV;
 	}
 
@@ -258,7 +277,9 @@ static int i2c_touchkey_write(u8 * val, unsigned int len)
 		msg->len = len;
 		msg->buf = data;
 		err = i2c_transfer(touchkey_driver->client->adapter, msg, 1);
-		//printk("write value %d to address %d\n",*val, msg->addr);
+#if 1 /* creams */
+		printk("write value %d to address %d\n",*val, msg->addr);
+#endif
 		if (err >= 0) {
 
 			return 0;
@@ -278,6 +299,7 @@ void touchkey_work_func(struct work_struct *p)
 	int ret;
 	int retry = 10;
 
+
 #if 0
 	if (gpio_get_value(_3_GPIO_TOUCH_INT)) {
 		printk(KERN_DEBUG "[TouchKey] Unknown state.\n", __func__);
@@ -425,6 +447,9 @@ void touchkey_work_func(struct work_struct *p)
 
 static irqreturn_t touchkey_interrupt(int irq, void *dummy)
 {
+#ifdef CONFIG_TOUCHKEY_BLN
+        printk(KERN_ERR "[TouchKey] interrupt touchkey\n");
+#endif
 	set_touchkey_debug('I');
 	disable_irq_nosync(IRQ_TOUCH_INT);
 	queue_work(touchkey_wq, &touchkey_work);
@@ -506,7 +531,7 @@ static int melfas_touchkey_late_resume(struct early_suspend *h)
 
 	if(touchled_cmd_reversed) {
 		touchled_cmd_reversed = 0;
-		i2c_touchkey_write(&touchkey_led_status, 1);
+		i2c_touchkey_write((u8 *)&touchkey_led_status, 1);
 		printk("LED returned on\n");
 	}
 
@@ -518,6 +543,213 @@ static int melfas_touchkey_late_resume(struct early_suspend *h)
 }
 #endif
 
+#ifdef CONFIG_TOUCHKEY_BLN
+
+static void touchkey_activate(void){
+
+        if( !wake_lock_active(&bln_wake_lock) ){ 
+            printk(KERN_DEBUG "[TouchKey] touchkey get wake_lock\n");
+            wake_lock(&bln_wake_lock);
+        }
+
+        printk(KERN_DEBUG "[TouchKey] touchkey activate.\n");
+        touchkey_ldo_on(1);
+
+        msleep(50);
+	touchkey_led_ldo_on(1);
+
+        touchkey_enable = 1;
+}
+
+static void touchkey_deactivate(void){
+
+        touchkey_led_ldo_on(0);
+        touchkey_ldo_on(0);
+
+        if( wake_lock_active(&bln_wake_lock) ){
+            printk(KERN_DEBUG "[TouchKey] touchkey clear wake_lock\n");
+            wake_unlock(&bln_wake_lock);
+        }
+
+        touchkey_enable = 0;
+}
+
+static void bln_early_suspend(struct early_suspend *h){
+
+        printk(KERN_DEBUG "[TouchKey] BLN suspend\n");
+        bln_suspended = true;
+
+}
+
+static void bln_late_resume(struct early_suspend *h){
+
+        printk(KERN_DEBUG "[TouchKey] BLN resume\n");
+
+        bln_suspended = false;
+        if( wake_lock_active(&bln_wake_lock) ){
+            printk(KERN_DEBUG "[TouchKey] clear wake lock \n");
+            wake_unlock(&bln_wake_lock);
+        }
+
+}
+
+static struct early_suspend bln_suspend_data = {
+    .level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1,
+    .suspend = bln_early_suspend,
+    .resume = bln_late_resume,
+};
+
+static void enable_touchkey_backlights(void){
+        printk(KERN_ERR "[TouchKey] enable LED from BLN app\n");
+        int status = 1;
+        i2c_touchkey_write((u8 *)&status, 1 );
+}
+
+static void disable_touchkey_backlights(void){
+        printk(KERN_ERR "[TouchKey] disable LED from BLN app\n");
+        int status = 2;
+        i2c_touchkey_write((u8 *)&status, 1 );
+}
+
+static void enable_led_notification(void){
+
+        if( bln_enabled ){
+            if( touchkey_enable != 1 ){
+                if( bln_suspended ){
+                    touchkey_activate();
+                }
+            }
+            if( touchkey_enable == 1 ){
+                printk(KERN_DEBUG "[TouchKey] BLN_ongoing set to true\n");
+                BLN_ongoing = true;
+                enable_touchkey_backlights();
+            }
+        }
+
+}
+
+static void disable_led_notification(void){
+
+        bln_blink_enabled = false;
+        BLN_ongoing = false;
+        printk(KERN_DEBUG "[TouchKey] BLN_ongoing set to false\n");
+
+        if( touchkey_enable == 1 ){
+            disable_touchkey_backlights();
+            if( bln_suspended ){
+                touchkey_deactivate();
+            }
+        }
+
+}
+
+static ssize_t bln_status_read( struct device *dev, struct device_attribute *attr, char *buf ){
+        return sprintf(buf,"%u\n", (bln_enabled ? 1 : 0 ));
+}
+
+static ssize_t bln_status_write( struct device *dev, struct device_attribute *attr, const char *buf, size_t size ){
+        unsigned int data;
+
+        if(sscanf(buf,"%u\n", &data) == 1 ){
+            if( data == 0 || data == 1 ){
+
+                if( data == 1 ){
+                    bln_enabled = true;
+                }
+
+                if( data == 0 ){
+                    bln_enabled = false;
+                    if( BLN_ongoing )
+                        disable_led_notification();
+                }
+
+            }else{
+                /* error */
+            }
+        }else{
+            /* error */
+        }
+
+        return size;
+}
+
+static ssize_t notification_led_status_read( struct device *dev, struct device_attribute *attr, char *buf ){
+        return sprintf(buf,"%u\n", (BLN_ongoing ? 1 : 0 ));
+}
+
+static ssize_t notification_led_status_write( struct device *dev, struct device_attribute *attr, const char *buf, size_t size ){
+        unsigned int data;
+
+
+        if(sscanf(buf,"%u\n", &data ) == 1 ){
+            if( data == 0 || data == 1 ){
+                if( data == 1 )
+                    enable_led_notification();
+
+                if( data == 0 )
+                    disable_led_notification();
+            }else{
+                /* error */
+            }
+        }else{
+            /* error */
+        }
+
+        return size;
+}
+
+static ssize_t blink_control_read( struct device *dev, struct device_attribute *attr, char *buf ){
+        return sprintf( buf, "%u\n", (bln_blink_enabled ? 1 : 0 ) );
+}
+
+static ssize_t blink_control_write( struct device *dev, struct device_attribute *attr, const char *buf, size_t size ){
+        unsigned int data;
+
+        if( sscanf(buf, "%u\n", &data ) == 1 ){
+            if( data == 0 || data == 1 ){
+                if (data == 1){
+                    bln_blink_enabled = true;
+                    disable_touchkey_backlights();
+                }
+
+                if(data == 0){
+                    bln_blink_enabled = false;
+                    enable_touchkey_backlights();
+                }
+            }
+        }
+
+        return size;
+}
+
+static ssize_t bln_version( struct device *dev, struct device_attribute *attr, char *buf ){
+        return sprintf(buf,"%u\n", BLN_VERSION);
+}
+
+static DEVICE_ATTR(blink_control, S_IRUGO | S_IWUGO, blink_control_read, blink_control_write );
+static DEVICE_ATTR(enabled, S_IRUGO | S_IWUGO, bln_status_read, bln_status_write );
+static DEVICE_ATTR(notification_led, S_IRUGO | S_IWUGO, notification_led_status_read,  notification_led_status_write );
+static DEVICE_ATTR(version, S_IRUGO, bln_version, NULL );
+
+static struct attribute *bln_notification_attributes[] = {
+        &dev_attr_blink_control.attr,
+        &dev_attr_enabled.attr,
+        &dev_attr_notification_led.attr,
+        &dev_attr_version.attr,
+        NULL
+};
+
+static struct attribute_group bln_notification_group = {
+        .attrs = bln_notification_attributes,
+};
+
+static struct miscdevice bln_device = {
+        .minor = MISC_DYNAMIC_MINOR,
+        .name  = "backlightnotification",
+};
+
+#endif
+
 extern int mcsdl_download_binary_data(void);
 static int i2c_touchkey_probe(struct i2c_client *client,
 			      const struct i2c_device_id *id)
@@ -598,6 +830,25 @@ static int i2c_touchkey_probe(struct i2c_client *client,
 	touchkey_led_ldo_on(1);
 
 	set_touchkey_debug('K');
+
+#ifdef CONFIG_TOUCHKEY_BLN
+        err = misc_register( &bln_device );
+        if( err ){
+            printk(KERN_ERR "[BLN] sysfs misc_register failed.\n");
+        }else{
+            if( sysfs_create_group( &bln_device.this_device->kobj, &bln_notification_group) < 0){
+                printk(KERN_ERR "[BLN] sysfs create group failed.\n");
+            } 
+        }
+
+        /* BLN early suspend */
+        register_early_suspend(&bln_suspend_data);
+
+        /* wake lock for BLN */
+        wake_lock_init(&bln_wake_lock, WAKE_LOCK_SUSPEND, "bln_wake_lock");
+#endif
+
+
 	return 0;
 }
 
@@ -732,6 +983,11 @@ static ssize_t touch_led_control(struct device *dev,
 {
 	int data;
 	int errnum;
+
+#ifdef CONFIG_TOUCHKEY_BLN
+	printk(KERN_ERR "[TouchKey] system calling LED Notification control\n");
+#endif
+
 	if (sscanf(buf, "%d\n", &data) == 1) {
 		errnum = i2c_touchkey_write((u8 *)&data, 1);
 		if(errnum==-ENODEV) {
@@ -749,6 +1005,7 @@ static ssize_t touchkey_enable_disable(struct device *dev,
 				       struct device_attribute *attr,
 				       const char *buf, size_t size)
 {
+
 	return size;
 }
 
@@ -895,6 +1152,7 @@ static DEVICE_ATTR(touch_sensitivity, S_IRUGO | S_IWUSR | S_IWGRP, NULL,
 static DEVICE_ATTR(touchkey_brightness, S_IRUGO | S_IWUSR | S_IWGRP, NULL, brightness_control);
 
 
+
 static int __init touchkey_init(void)
 {
 	int ret = 0;
@@ -908,6 +1166,7 @@ static int __init touchkey_init(void)
 	gpio_request(_3_GPIO_TOUCH_EN, "_3_GPIO_TOUCH_EN");
 	gpio_request(_3_GPIO_TOUCH_INT, "_3_GPIO_TOUCH_INT");
 
+
 	/*20110222 N1_firmware_sync*/
 	sec_touchkey= device_create(sec_class, NULL, 0, NULL, "sec_touchkey");
 
@@ -1068,6 +1327,11 @@ static void __exit touchkey_exit(void)
 	i2c_del_driver(&touchkey_i2c_driver);
 	misc_deregister(&touchkey_update_device);
 
+#ifdef CONFIG_TOUCHKEY_BLN
+        misc_deregister(&bln_device);
+        wake_lock_destroy(&bln_wake_lock);
+#endif
+
 	if (touchkey_wq) {
 		destroy_workqueue(touchkey_wq);
 	}
-- 
1.7.10
