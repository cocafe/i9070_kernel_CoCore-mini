From 3477682d1c9748b2a4bbe473f65c17a3aea4319d Mon Sep 17 00:00:00 2001
From: Andrea Righi <andrea@betterlinux.com>
Date: Mon, 29 Aug 2011 11:24:09 +0200
Subject: [PATCH] cgroup: speed up access to cgroupfs mounted entries in
 /proc/mounts

Introduce a new fine-grained lock to protect only the informations
exported to /proc/mounts.

This allows to read /proc/mounts without acquiring the global
cgroup_mutex lock.

Signed-off-by: Andrea Righi <andrea@betterlinux.com>
---
 kernel/cgroup.c |   22 +++++++++++++++++++---
 1 file changed, 19 insertions(+), 3 deletions(-)

diff --git a/kernel/cgroup.c b/kernel/cgroup.c
index 7a14a97..b2dee5c 100644
--- a/kernel/cgroup.c
+++ b/kernel/cgroup.c
@@ -117,6 +117,12 @@ struct cgroupfs_root {
 
 	/* The name for this hierarchy - may be empty */
 	char name[MAX_CGROUP_ROOT_NAMELEN];
+
+	/*
+	 * Used to show coeherent informations in /proc/mounts without
+	 * acquiring the cgroup_mutex lock.
+	 */
+	rwlock_t lock;
 };
 
 /*
@@ -982,7 +988,9 @@ static int rebind_subsystems(struct cgroupfs_root *root,
 			mutex_lock(&ss->hierarchy_mutex);
 			cgrp->subsys[i] = dummytop->subsys[i];
 			cgrp->subsys[i]->cgroup = cgrp;
+			write_lock(&root->lock);
 			list_move(&ss->sibling, &root->subsys_list);
+			write_unlock(&root->lock);
 			ss->root = root;
 			if (ss->bind)
 				ss->bind(ss, cgrp);
@@ -999,7 +1007,9 @@ static int rebind_subsystems(struct cgroupfs_root *root,
 			dummytop->subsys[i]->cgroup = dummytop;
 			cgrp->subsys[i] = NULL;
 			subsys[i]->root = &rootnode;
+			write_lock(&root->lock);
 			list_move(&ss->sibling, &rootnode.subsys_list);
+			write_unlock(&root->lock);
 			mutex_unlock(&ss->hierarchy_mutex);
 			/* subsystem is now free - drop reference on module */
 			module_put(ss->module);
@@ -1031,7 +1041,7 @@ static int cgroup_show_options(struct seq_file *seq, struct vfsmount *vfs)
 	struct cgroupfs_root *root = vfs->mnt_sb->s_fs_info;
 	struct cgroup_subsys *ss;
 
-	mutex_lock(&cgroup_mutex);
+	read_lock(&root->lock);
 	for_each_subsys(root, ss)
 		seq_printf(seq, ",%s", ss->name);
 	if (test_bit(ROOT_NOPREFIX, &root->flags))
@@ -1040,7 +1050,7 @@ static int cgroup_show_options(struct seq_file *seq, struct vfsmount *vfs)
 		seq_printf(seq, ",release_agent=%s", root->release_agent_path);
 	if (strlen(root->name))
 		seq_printf(seq, ",name=%s", root->name);
-	mutex_unlock(&cgroup_mutex);
+	read_unlock(&root->lock);
 	return 0;
 }
 
@@ -1246,8 +1256,11 @@ static int cgroup_remount(struct super_block *sb, int *flags, char *data)
 	/* (re)populate subsystem files */
 	cgroup_populate_dir(cgrp);
 
-	if (opts.release_agent)
+	if (opts.release_agent) {
+		write_lock(&root->lock);
 		strcpy(root->release_agent_path, opts.release_agent);
+		write_unlock(&root->lock);
+	}
  out_unlock:
 	kfree(opts.release_agent);
 	kfree(opts.name);
@@ -1281,6 +1294,7 @@ static void init_cgroup_root(struct cgroupfs_root *root)
 	struct cgroup *cgrp = &root->top_cgroup;
 	INIT_LIST_HEAD(&root->subsys_list);
 	INIT_LIST_HEAD(&root->root_list);
+	rwlock_init(&root->lock);
 	root->number_of_cgroups = 1;
 	cgrp->root = root;
 	cgrp->top_cgroup = cgrp;
@@ -1857,7 +1871,9 @@ static int cgroup_release_agent_write(struct cgroup *cgrp, struct cftype *cft,
 	BUILD_BUG_ON(sizeof(cgrp->root->release_agent_path) < PATH_MAX);
 	if (!cgroup_lock_live_group(cgrp))
 		return -ENODEV;
+	write_lock(&cgrp->root->lock);
 	strcpy(cgrp->root->release_agent_path, buffer);
+	write_unlock(&cgrp->root->lock);
 	cgroup_unlock();
 	return 0;
 }
-- 
1.7.10
